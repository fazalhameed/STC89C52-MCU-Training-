C51 COMPILER V9.60.7.0   MAIN                                                              12/27/2023 11:18:48 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg51.h> 
   2          #include "T_LCD.h"      
   3          #include "delay.h"
   4          #include <DS1302.h>
*** WARNING C318 IN LINE 4 OF main.c: can't open file 'DS1302.h'
   5          
   6          #define  ADR_WR_CREG    0x8E  //Control Register Write
   7          #define  ADR_RD_CREG    0x8F  //Control Register Read
   8          #define  ADR_WR_TCR     0x90  //Trickle Charge Register Write
   9          #define  ADR_RD_TCR     0x91  //Trickle Charge Register Read
  10          #define  ADR_WR_BURST   0xBE  //Burst Write
  11          #define  ADR_RD_BURST   0xBF  //Burst Read
  12          
  13          #define  ADR_WR_SEC    0x80  //Seconds Write
  14          #define  ADR_RD_SEC    0x81  //Seconds Read
  15          #define  ADR_WR_MIN    0x82  //Mins Write
  16          #define  ADR_RD_MIN    0x83  //...
  17          #define  ADR_WR_HR    0x84
  18          #define  ADR_RD_HR    0x85
  19          #define  ADR_WR_DATE    0x86
  20          #define  ADR_RD_DATE    0x87
  21          #define  ADR_WR_MON    0x88
  22          #define  ADR_RD_MON    0x89
  23          #define  ADR_WR_DAY    0x8A
  24          #define  ADR_RD_DAY    0x8B
  25          #define  ADR_WR_YR    0x8C
  26          #define  ADR_RD_YR    0x8D
  27          
  28          int clock_data[8];
  29          int temp_byte[8];
  30          int temp;
  31          int x;
  32          unsigned int i;
  33          unsigned int j;
  34          char array[32];
  35          char jj=0,ii=0,kk=0;
  36          
  37          unsigned char sec,min,hour,day,month,year;
  38          
  39          sbit CE=P3^5;
  40          sbit CLk=P3^6;
  41          sbit io=P3^4;
  42          
  43          void Ext_int_Init()       
  44          {
  45   1        EA  = 1;    /* Enable global interrupt */
  46   1        ES = 1;     /* Enable serial interrupt */     
  47   1      }
  48          
  49          void UART_Init()
  50          {
  51   1        TMOD = 0x20;    /* Timer 1, 8-bit auto reload mode */
  52   1        TH1 = 0xFD;   /* Load value for 9600 baud rate */
  53   1        TL1=0xFF;
C51 COMPILER V9.60.7.0   MAIN                                                              12/27/2023 11:18:48 PAGE 2   

  54   1        SCON = 0x50;    /* Mode 1, reception enable */
  55   1        TR1 = 1;    /* Start timer 1 */
  56   1      }
  57          void Serial_ISR() interrupt 4    
  58          { if(RI==1){
  59   2        array[jj]=SBUF; 
  60   2        RI = 0; /* Clear RI flag */
  61   2        jj++;
  62   2        } 
  63   1      
  64   1      } 
  65           void SCLK_Pulse (void)
  66          {
  67   1        CLk=1;
  68   1        CLk=0;
  69   1      }
  70          void Send_Bit (unsigned int value)
  71          {
  72   1          if (value != 0){
  73   2              io=1;
  74   2          }
  75   1          else {
  76   2              io=0;
  77   2          }
  78   1      }
  79           void Write_Byte(int content)
  80          {
  81   1      
  82   1          for (i=0;i<8;i++){
  83   2                   x = (content & (1 << i));  //Write to Address
  84   2                   Send_Bit(x);
  85   2                   SCLK_Pulse();
  86   2              }
  87   1      }
  88          
  89          void Read_Burst (void)
  90          {
  91   1          CE=1;
  92   1          Write_Byte(ADR_RD_BURST);
  93   1          for (i=0;i<8;i++){
  94   2              temp = 0;
  95   2          for (j=0;j<8;j++){
  96   3                  temp >>= 1;
  97   3                      if (io == 1){
  98   4      
  99   4                          temp |= 0x80;
 100   4                             }
 101   3                             else {
 102   4      
 103   4                          temp  &= 0x7F;
 104   4                             }
 105   3      
 106   3                      SCLK_Pulse();
 107   3                      }
 108   2          clock_data[i] = temp;
 109   2          }
 110   1          CE=0;
 111   1      }
 112          
 113          void Read_Byte(int addr)
 114          {
 115   1          temp = 0;
C51 COMPILER V9.60.7.0   MAIN                                                              12/27/2023 11:18:48 PAGE 3   

 116   1          Write_Byte(addr);
 117   1          for (j=0;j<8;j++){
 118   2              temp >>= 1;
 119   2              
 120   2              if (io == 1)
 121   2                  temp |= 0x80;
 122   2              else 
 123   2                  temp  &= 0x7F;
 124   2      
 125   2              SCLK_Pulse();
 126   2              }
 127   1      }
 128          void write_data(char cmd,char value)
 129          {
 130   1        CE=1;
 131   1        Write_Byte(cmd);  //cmd
 132   1        Write_Byte(value);  //data
 133   1        CE=0;
 134   1      }
 135           void set_time(char hrs, char mins, char secs , char days,char month,char year)
 136           {
 137   1        write_data(ADR_WR_SEC,secs);//Go to seconds register
 138   1        
 139   1        write_data(ADR_WR_MIN,mins);  //Go to minute register
 140   1        
 141   1        write_data(ADR_WR_HR,hrs);  //Go to hour register
 142   1      
 143   1        write_data(ADR_WR_DATE,days);  //Go to date register
 144   1        
 145   1        write_data(ADR_WR_MON,month);  //Go to month register
 146   1        
 147   1        write_data(ADR_WR_DAY,0x01);  //Go to day register
 148   1        
 149   1        write_data(ADR_WR_YR,year);  //Go to year register
 150   1       }   
 151           void time_cvt()
 152           {
 153   1          sec=((array[1]-0x030) | ((array[0]-0x30)<<3));
 154   1         min=((array[4]-0x030) | ((array[3]-0x30)<<4));
 155   1         hour=((array[7]-0x030) | ((array[17] & 0xD0)<<1) |((array[6]-0x30)<<4));
 156   1         day=((array[10]-0x030) | ((array[9]-0x30)<<4));
 157   1         month=((array[13]-0x030) | ((array[12]-0x30)<<4));
 158   1         year=((array[16]-0x030) | ((array[15]-0x30)<<4));
 159   1          set_time(hour,min,sec,day,month,year);
 160   1      
 161   1       }
 162          /* main program */
 163          void main() 
 164          {
 165   1        
 166   1        LCD_Init();
 167   1        
 168   1        write_data(ADR_WR_CREG,0x00);
 169   1        
 170   1        write_data(ADR_WR_TCR,0xAB);//Go to Trickle charge 
 171   1        set_time(0x11,0x09,0x00,0x27,0x12,0x23);
 172   1      
 173   1        Ext_int_Init();   /* Call Ext. interrupt initialize */
 174   1        UART_Init();
 175   1          
 176   1        lcd_DisplayString("TIME:");
 177   1       
C51 COMPILER V9.60.7.0   MAIN                                                              12/27/2023 11:18:48 PAGE 4   

 178   1         /* Display "date" on Second line*/
 179   1        lcd_GoToLineTwo();
 180   1        lcd_DisplayString("DATE:  ");
 181   1       
 182   1         /* Display the time and date continously */ 
 183   1         while(1)
 184   1          {
 185   2            if (jj>ii)
 186   2            {
 187   3              if(array[ii-1]== 0x5C && array[ii]== 'r' ){
 188   4                  EA  = 0;
 189   4                  ES = 0; 
 190   4                time_cvt();
 191   4                ii=0;jj=0;
 192   4              }
 193   3              ii++;
 194   3            }
 195   2            CE=1;
 196   2            Read_Burst();
 197   2            CE=0;
 198   2      
 199   2       
 200   2            lcd_GoToXY(0,6);     
 201   2            lcd_DisplayRtcTime(clock_data[2],clock_data[1],clock_data[0]);
 202   2            if((clock_data[2]&0x80)>0){
 203   3              if((clock_data[2]&0x20)>0)
 204   3                lcd_DisplayString("PM");
 205   3              else
 206   3                lcd_DisplayString("AM");
 207   3            }
 208   2            else
 209   2              lcd_DisplayString("  ");
 210   2            
 211   2            lcd_GoToXY(1,6);     
 212   2            lcd_DisplayRtcDate(clock_data[3],clock_data[6],clock_data[6]);
 213   2           }
 214   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    683    ----
   CONSTANT SIZE    =     23    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     81       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
